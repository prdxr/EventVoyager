# Generated by Django 5.1.1 on 2024-11-17 16:42

import django.contrib.auth.models
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='BotUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('username', models.CharField(error_messages={'unique': 'Имя пользователя должно быть уникальным.'}, max_length=255, unique=True)),
                ('telegram_id', models.BigIntegerField(blank=True, null=True, unique=True)),
                ('mailing_all', models.BooleanField(default=True)),
                ('mailing_status', models.BooleanField(default=False)),
                ('notification_status', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=255, unique=True)),
                ('description', models.TextField()),
                ('address', models.CharField(blank=True, max_length=255, null=True)),
                ('start_date', models.DateTimeField(blank=True, null=True)),
                ('registration_deadline', models.DateTimeField(blank=True, null=True)),
                ('end_date', models.DateTimeField(blank=True, null=True)),
                ('url', models.URLField(max_length=255)),
                ('is_free', models.BooleanField(blank=True, null=True)),
                ('date_of_parsing', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='EventTypeClassifier',
            fields=[
                ('type_code', models.SmallAutoField(primary_key=True, serialize=False, verbose_name='type_code')),
                ('description', models.CharField(max_length=255, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('tag_code', models.SmallAutoField(primary_key=True, serialize=False, verbose_name='tag_code')),
                ('description', models.CharField(max_length=255, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='HistoryUserRequest',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('time_of_last_request', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.AddField(
            model_name='botuser',
            name='new_events',
            field=models.ManyToManyField(blank=True, to='main.event'),
        ),
        migrations.AddField(
            model_name='event',
            name='type_of_event',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.eventtypeclassifier'),
        ),
        migrations.AddField(
            model_name='botuser',
            name='event_preferences',
            field=models.ManyToManyField(blank=True, to='main.eventtypeclassifier'),
        ),
        migrations.CreateModel(
            name='Keyword',
            fields=[
                ('keyword_code', models.BigAutoField(primary_key=True, serialize=False)),
                ('content', models.CharField(max_length=255)),
                ('tag_code', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='main.tag')),
            ],
        ),
        migrations.AddField(
            model_name='event',
            name='tags',
            field=models.ManyToManyField(blank=True, to='main.tag'),
        ),
        migrations.AddField(
            model_name='botuser',
            name='tag_preferences',
            field=models.ManyToManyField(blank=True, to='main.tag'),
        ),
    ]
